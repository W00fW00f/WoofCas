swagger: "2.0"
info:
  description: "This is a CAS server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/)."
  version: "1.0.0"
  title: "CrashAvoidanceSystem"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
host: "woof-woof-cloud.herokuapp.com"
basePath: "/"
tags:
- name: "vehicle"
  description: "Everything about the vehicles"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "infrastructure"
  description: "Everything about the infrastructure"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /vehicle:
    post:
      tags:
      - "vehicle"
      summary: "Register new vehicle to the system"
      description: ""
      operationId: "newVehicle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Information uniquely identifying a vehicle"
        required: true
        schema:
          $ref: "#/definitions/Vehicle"
      responses:
        405:
          description: "Invalid input"

  /vehicle/{vin}:
    get:
      tags:
      - "vehicle"
      summary: "Find vehicle by vin"
      description: "Returns a single vehicle"
      operationId: "getVehicle"
      produces:
      - "application/json"
      parameters:
      - name: "vin"
        in: "path"
        description: "Vehicle identification number of the vehicle whose data to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Vehicle"
        400:
          description: "Invalid vin supplied"
        404:
          description: "Vehicle not found"
    post:
      tags:
      - "vehicle"
      summary: "Update vehicle data by vin"
      description: "Updates data for one vehicle"
      operationId: "newVehicleData"
      produces:
      - "application/json"
      parameters:
      - name: "vin"
        in: "path"
        description: "Vehicle identification number of the vehicle whose data to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Vehicle data object that contains the latest information about the car"
        required: true
        schema:
          $ref: "#/definitions/VehicleData"
      responses:
        405:
          description: "Invalid input"

  /infrastructure/{intersectionId}:
    post:
      tags:
      - "infrastructure"
      summary: "Update the current rule for an intersection in the system"
      description: ""
      operationId: "changeCurrentRule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "intersectionId"
        in: "path"
        description: "The id of the intersection for which the current rule is changed"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "The rule that should be used in the given intersection"
        required: true
        schema:
          $ref: "#/definitions/Rule"
      responses:
        405:
          description: "Invalid input"

definitions:
  Vehicle:
    type: "object"
    required:
    - "vin"
    - "service_address"
    properties:
      vin:
        type: "string"
        description: "The unique vehicle identification number"
      serviceAddress:
        type: "string"
        description: "The address at which the Vehicle receives alers and information"
        example: "123.123.123.123:9999/"
    xml:
      name: "Vehicle"
  
  Position:
    type: "object"
    properties:
      latitude:
        type: "integer"
        format: "int64"
      longitude:
        type: "integer"
        format: "int64"
    xml:
      name: "Position"

  VehicleData:
    type: "object"
    required:
    - "position"
    properties:
      position:
        $ref: "#/definitions/Position"
      speed:
        type: "integer"
        format: "int64"
      direction:
        type: "string"
        description: "Direction in which the vehicle goes"
        enum:
        - "forward"
        - "backward"
        - "none"
    xml:
      name: "VehicleData"

  RuleEntry:
    type: "object"
    required:
    - "high_priority_road"
    - "low_priority_road"
    properties:
      highPriorityRoad:
        type: "integer"
        format: "int64"
      lowPriorityRoad:
        type: "integer"
        format: "int64"
    xml:
      name: "RuleEntry"        

  Rule:
    type: "object"
    required:
    - "position"
    properties:
      entries:
        type: "array"
        xml:
          name: "entries"
          wrapped: true
        items:
          $ref: "#/definitions/RuleEntry"
    xml:
      name: "Rule"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"