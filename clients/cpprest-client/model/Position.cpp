/**
 * CrashAvoidanceSystem
 * This is a CAS server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Position.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Position::Position()
{
    m_Latitude = 0L;
    m_LatitudeIsSet = false;
    m_Longitude = 0L;
    m_LongitudeIsSet = false;
}

Position::~Position()
{
}

void Position::validate()
{
    // TODO: implement validation
}

web::json::value Position::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void Position::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("latitude")]));
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("longitude")]));
    }
}

void Position::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
}

void Position::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
}

int64_t Position::getLatitude() const
{
    return m_Latitude;
}


void Position::setLatitude(int64_t value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool Position::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void Position::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

int64_t Position::getLongitude() const
{
    return m_Longitude;
}


void Position::setLongitude(int64_t value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool Position::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void Position::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

