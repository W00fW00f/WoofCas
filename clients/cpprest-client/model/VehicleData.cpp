/**
 * CrashAvoidanceSystem
 * This is a CAS server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VehicleData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

VehicleData::VehicleData()
{
    m_Speed = 0L;
    m_SpeedIsSet = false;
    m_Direction = utility::conversions::to_string_t("");
    m_DirectionIsSet = false;
}

VehicleData::~VehicleData()
{
}

void VehicleData::validate()
{
    // TODO: implement validation
}

web::json::value VehicleData::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("position")] = ModelBase::toJson(m_Position);
    if(m_SpeedIsSet)
    {
        val[utility::conversions::to_string_t("speed")] = ModelBase::toJson(m_Speed);
    }
    if(m_DirectionIsSet)
    {
        val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    }

    return val;
}

void VehicleData::fromJson(web::json::value& val)
{
    std::shared_ptr<Position> newPosition(new Position());
    newPosition->fromJson(val[utility::conversions::to_string_t("position")]);
    setPosition( newPosition );
    if(val.has_field(utility::conversions::to_string_t("speed")))
    {
        setSpeed(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("speed")]));
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        setDirection(ModelBase::stringFromJson(val[utility::conversions::to_string_t("direction")]));
    }
}

void VehicleData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Position->toMultipart(multipart, utility::conversions::to_string_t("position."));
    if(m_SpeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("speed"), m_Speed));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
        
    }
}

void VehicleData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<Position> newPosition(new Position());
    newPosition->fromMultiPart(multipart, utility::conversions::to_string_t("position."));
    setPosition( newPosition );
    if(multipart->hasContent(utility::conversions::to_string_t("speed")))
    {
        setSpeed(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("speed"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direction")))
    {
        setDirection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction"))));
    }
}

std::shared_ptr<Position> VehicleData::getPosition() const
{
    return m_Position;
}


void VehicleData::setPosition(std::shared_ptr<Position> value)
{
    m_Position = value;
    
}
int64_t VehicleData::getSpeed() const
{
    return m_Speed;
}


void VehicleData::setSpeed(int64_t value)
{
    m_Speed = value;
    m_SpeedIsSet = true;
}
bool VehicleData::speedIsSet() const
{
    return m_SpeedIsSet;
}

void VehicleData::unsetSpeed()
{
    m_SpeedIsSet = false;
}

utility::string_t VehicleData::getDirection() const
{
    return m_Direction;
}


void VehicleData::setDirection(utility::string_t value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}
bool VehicleData::directionIsSet() const
{
    return m_DirectionIsSet;
}

void VehicleData::unsetDirection()
{
    m_DirectionIsSet = false;
}

}
}
}
}

