/**
 * CrashAvoidanceSystem
 * This is a CAS server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RuleEntry.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RuleEntry::RuleEntry()
{
    m_HighPriorityRoad = 0L;
    m_HighPriorityRoadIsSet = false;
    m_LowPriorityRoad = 0L;
    m_LowPriorityRoadIsSet = false;
}

RuleEntry::~RuleEntry()
{
}

void RuleEntry::validate()
{
    // TODO: implement validation
}

web::json::value RuleEntry::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HighPriorityRoadIsSet)
    {
        val[utility::conversions::to_string_t("highPriorityRoad")] = ModelBase::toJson(m_HighPriorityRoad);
    }
    if(m_LowPriorityRoadIsSet)
    {
        val[utility::conversions::to_string_t("lowPriorityRoad")] = ModelBase::toJson(m_LowPriorityRoad);
    }

    return val;
}

void RuleEntry::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("highPriorityRoad")))
    {
        setHighPriorityRoad(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("highPriorityRoad")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lowPriorityRoad")))
    {
        setLowPriorityRoad(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("lowPriorityRoad")]));
    }
}

void RuleEntry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_HighPriorityRoadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highPriorityRoad"), m_HighPriorityRoad));
    }
    if(m_LowPriorityRoadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowPriorityRoad"), m_LowPriorityRoad));
    }
}

void RuleEntry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("highPriorityRoad")))
    {
        setHighPriorityRoad(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("highPriorityRoad"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowPriorityRoad")))
    {
        setLowPriorityRoad(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowPriorityRoad"))));
    }
}

int64_t RuleEntry::getHighPriorityRoad() const
{
    return m_HighPriorityRoad;
}


void RuleEntry::setHighPriorityRoad(int64_t value)
{
    m_HighPriorityRoad = value;
    m_HighPriorityRoadIsSet = true;
}
bool RuleEntry::highPriorityRoadIsSet() const
{
    return m_HighPriorityRoadIsSet;
}

void RuleEntry::unsetHighPriorityRoad()
{
    m_HighPriorityRoadIsSet = false;
}

int64_t RuleEntry::getLowPriorityRoad() const
{
    return m_LowPriorityRoad;
}


void RuleEntry::setLowPriorityRoad(int64_t value)
{
    m_LowPriorityRoad = value;
    m_LowPriorityRoadIsSet = true;
}
bool RuleEntry::lowPriorityRoadIsSet() const
{
    return m_LowPriorityRoadIsSet;
}

void RuleEntry::unsetLowPriorityRoad()
{
    m_LowPriorityRoadIsSet = false;
}

}
}
}
}

