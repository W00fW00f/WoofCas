/**
 * CrashAvoidanceSystem
 * This is a CAS server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Vehicle.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Vehicle::Vehicle()
{
    m_Vin = utility::conversions::to_string_t("");
    m_ServiceAddress = utility::conversions::to_string_t("");
    m_ServiceAddressIsSet = false;
}

Vehicle::~Vehicle()
{
}

void Vehicle::validate()
{
    // TODO: implement validation
}

web::json::value Vehicle::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("vin")] = ModelBase::toJson(m_Vin);
    if(m_ServiceAddressIsSet)
    {
        val[utility::conversions::to_string_t("serviceAddress")] = ModelBase::toJson(m_ServiceAddress);
    }

    return val;
}

void Vehicle::fromJson(web::json::value& val)
{
    setVin(ModelBase::stringFromJson(val[utility::conversions::to_string_t("vin")]));
    if(val.has_field(utility::conversions::to_string_t("serviceAddress")))
    {
        setServiceAddress(ModelBase::stringFromJson(val[utility::conversions::to_string_t("serviceAddress")]));
    }
}

void Vehicle::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vin"), m_Vin));
    if(m_ServiceAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serviceAddress"), m_ServiceAddress));
        
    }
}

void Vehicle::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setVin(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("vin"))));
    if(multipart->hasContent(utility::conversions::to_string_t("serviceAddress")))
    {
        setServiceAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("serviceAddress"))));
    }
}

utility::string_t Vehicle::getVin() const
{
    return m_Vin;
}


void Vehicle::setVin(utility::string_t value)
{
    m_Vin = value;
    
}
utility::string_t Vehicle::getServiceAddress() const
{
    return m_ServiceAddress;
}


void Vehicle::setServiceAddress(utility::string_t value)
{
    m_ServiceAddress = value;
    m_ServiceAddressIsSet = true;
}
bool Vehicle::serviceAddressIsSet() const
{
    return m_ServiceAddressIsSet;
}

void Vehicle::unsetServiceAddress()
{
    m_ServiceAddressIsSet = false;
}

}
}
}
}

